<!-- xml reconstructed by Source 2 Viewer 7.0.0.0 - https://valveresourceformat.github.io -->
<root>
	<styles>
		<include src="s2r://panorama/styles/dotastyles.vcss_c" />
		<include src="s2r://panorama/layout/custom_game/ot3_demo/ot3_demo.vcss_c" />
	</styles>
	<scripts>
		<include src="s2r://panorama/layout/custom_game/scripts/utils.vjs_c" />
		<include src="s2r://panorama/layout/custom_game/ot3_demo/ot3_demo.vjs_c" />
		<include src="s2r://panorama/layout/custom_game/scripts/upgrades_shared.vjs_c" />
		<include src="s2r://panorama/layout/custom_game/ot3_demo/demo_orb_upgrades.vjs_c" />
	</scripts>
	<snippets>
		<snippet name="DevAbilityConfig">
			<Panel class="DevAbilityConfig">
				<Panel class="DevAbility_Header">
					<DOTAAbilityImage id="DevAbilityImage" />
					<Label class="DevAbilityName" text="{s:ability_name_header}" />
				</Panel>
				<Panel id="DevAbilitySpecials" />
			</Panel>
		</snippet>
		<snippet name="LinkedSpecial">
			<Panel class="LinkedSpecial">
				<Image class="LS_Icon" src="s2r://panorama/images/custom_game/upgrades/link_icon_png.vtex" />
				<DOTAAbilityImage id="LinkedAbilityImage" />
				<Label class="LS_SpecialName" text="{s:special_name}" html="true" />
				<Label id="LS_Value" text="{s:base_value} x &lt;a class=&apos;UpgradesCount&apos;&gt;{d:upgrades_count}&lt;/a&gt; = {s:total_value}" html="true" />
			</Panel>
		</snippet>
		<snippet name="DevAbilitySpecial">
			<Panel class="DevAbilitySpecial">
				<Panel class="DevAbilitySpecial_Basic">
					<Label class="DevAbilitySpecialName" text="{s:special_name}" html="true" />
					<Label id="DevAbilitySpecialParams" class="DevAbilitySpecialParams" text="{s:base_value} x &lt;a class=&apos;UpgradesCount&apos;&gt;{d:upgrades_count}&lt;/a&gt; = {s:total_value}" html="true" />
					<Button id="DevAbilityDecrement" class="DevAbilitySpecialButton">
						<Label class="DevAbilitySpecialButtonContent" text="-" />
					</Button>
					<Button id="DevAbilityIncrement" class="DevAbilitySpecialButton">
						<Label class="DevAbilitySpecialButtonContent" text="+" />
					</Button>
				</Panel>
				<Panel id="DevAbilitySpecial_Linked" />
			</Panel>
		</snippet>
		<snippet name="DevGenericSpecial">
			<Panel class="DevAbilitySpecial">
				<Panel class="DevAbilitySpecial_Basic">
					<Label class="DevAbilitySpecialName" text="{s:special_name}" />
					<Label id="DevAbilitySpecialParams" class="DevAbilitySpecialParams" text="{s:base_value} x &lt;a class=&apos;UpgradesCount&apos;&gt;{d:upgrades_count}&lt;/a&gt; = {s:total_value}" html="true" />
					<Button id="DevAbilityDecrement" class="DevAbilitySpecialButton">
						<Label class="DevAbilitySpecialButtonContent" text="-" />
					</Button>
					<Button id="DevAbilityIncrement" class="DevAbilitySpecialButton">
						<Label class="DevAbilitySpecialButtonContent" text="+" />
					</Button>
				</Panel>
			</Panel>
		</snippet>
		<snippet name="enemy_team_option">
			<Panel class="DemoEnemyTeamOption" hittest="true">
				<Image class="DemoTeamIcon" hittest="true" />
			</Panel>
		</snippet>
	</snippets>
	<Panel hittest="false" class="DemoHudRoot">
		<Panel id="DemoSelectHeroContainer" acceptsfocus="true">
			<DOTAUIHeroPicker id="HeroPicker" />
			<Button id="CancelButton" class="CloseButton" acceptsjoyfocus="true" onactivate="ToggleHeroPicker(false)" />
		</Panel>
		<Panel id="DevAbilityKVs">
			<Label id="OrbTip" text="#DemoOrbTooltip" />
			<Panel id="OrbHeroContainer" class="OrbContainer" />
			<Panel id="OrbGenericContainer" class="OrbContainer" />
		</Panel>
		<Panel class="ControlPanel" hittest="false">
			<Panel class="ControlPanelContainer">
				<Panel id="Header">
					<Panel class="HeroDemoTextContainer">
						<Label id="HeroDemoHeroName" text="{s:selected_hero_name}" />
					</Panel>
				</Panel>
				<Panel id="SpawnUnitsCategory" class="Category">
					<Label class="CategoryHeader" text="#SpawnUnits_ButtonCategory" />
					<Panel class="CategoryButtonContainer">
						<Panel id="SpawnHeroButton" class="Row DemoButton" onactivate="ToggleHeroPicker()" acceptsjoyfocus="true">
							<DOTAHeroImage id="HeroPickerImage" class="HeroImage" heroimagestyle="landscape" />
							<Label id="SpawnHeroName" text="{s:spawn_hero_name}" />
							<Panel class="HeroPickerArrow" />
						</Panel>
						<Panel class="Row">
							<Button id="ChangeHeroButton" class="DemoButton LeftButton" acceptsjoyfocus="true" onactivate="GameEvents.SendCustomGameEventToServer(&apos;Demo:change_hero&apos;, {})">
								<Label text="#ChangeHero_Button" />
							</Button>
						</Panel>
						<Panel class="Row">
							<Button id="SpawnAllyButton" class="DemoButton LeftButton" acceptsjoyfocus="true" onactivate="GameEvents.SendCustomGameEventToServer(&apos;Demo:spawn_ally&apos;, {})">
								<Label text="#Ally_Button" />
							</Button>
							<Button id="SpawnEnemyButton" class="DemoButton RightButton" acceptsjoyfocus="true" onactivate="SpawnEnemyHero()">
								<Label text="#Enemy_Button" />
							</Button>
						</Panel>
						<Panel class="Row">
							<DropDown id="EnemyTeamSelector" class="DemoDropDown" menuclass="EnemyDropDownMenu" oninputsubmit="ChangeCurrentEnemyTeam()" onmouseout="UIHideTextTooltip()" onmouseover="UIShowTextTooltip(#DemoChangeEnemyTeam)" hittest="true" />
						</Panel>
						<Panel class="HorizontalRule" />
						<Panel class="Row">
							<Button class="DemoButton" acceptsjoyfocus="true" onactivate="GameEvents.SendCustomGameEventToServer(&apos;Demo:spawn_dummy&apos;, {})">
								<Label text="#DummyTarget_Button" />
							</Button>
						</Panel>
						<Panel class="Row">
							<Button class="RuneButton" acceptsjoyfocus="true" onactivate="RequestSpawnRune(DOTA_RUNES.DOTA_RUNE_DOUBLEDAMAGE)" onmouseover="MouseOverRune(&apos;RuneEmoticonDoubleDamage&apos;, &apos;#DOTA_HUD_Rune_DoubleDamage&apos;)" onmouseout="MouseOutRune(&apos;RuneEmoticonDoubleDamage&apos;)">
								<DOTAEmoticon id="RuneEmoticonDoubleDamage" alias="doubledamage" animating="false" />
							</Button>
							<Panel class="FillWidth" />
							<Button class="RuneButton" acceptsjoyfocus="true" onactivate="RequestSpawnRune(DOTA_RUNES.DOTA_RUNE_HASTE)" onmouseover="MouseOverRune(&apos;RuneEmoticonHaste&apos;, &apos;#DOTA_HUD_Rune_Haste&apos;)" onmouseout="MouseOutRune(&apos;RuneEmoticonHaste&apos;)">
								<DOTAEmoticon id="RuneEmoticonHaste" alias="haste" animating="false" />
							</Button>
							<Panel class="FillWidth" />
							<Button class="RuneButton" acceptsjoyfocus="true" onactivate="RequestSpawnRune(DOTA_RUNES.DOTA_RUNE_ILLUSION)" onmouseover="MouseOverRune(&apos;RuneEmoticonIllusion&apos;, &apos;#DOTA_HUD_Rune_Illusion&apos;)" onmouseout="MouseOutRune(&apos;RuneEmoticonIllusion&apos;)">
								<DOTAEmoticon id="RuneEmoticonIllusion" alias="illusion" animating="false" />
							</Button>
							<Panel class="FillWidth" />
							<Button class="RuneButton" acceptsjoyfocus="true" onactivate="RequestSpawnRune(DOTA_RUNES.DOTA_RUNE_INVISIBILITY)" onmouseover="MouseOverRune(&apos;RuneEmoticonInvisibility&apos;, &apos;#DOTA_HUD_Rune_Invisibility&apos;)" onmouseout="MouseOutRune(&apos;RuneEmoticonInvisibility&apos;)">
								<DOTAEmoticon id="RuneEmoticonInvisibility" alias="invisibility" animating="false" />
							</Button>
							<Panel class="FillWidth" />
							<Button class="RuneButton" acceptsjoyfocus="true" onactivate="RequestSpawnRune(DOTA_RUNES.DOTA_RUNE_REGENERATION)" onmouseover="MouseOverRune(&apos;RuneEmoticonRegeneration&apos;, &apos;#DOTA_HUD_Rune_Regeneration&apos;)" onmouseout="MouseOutRune(&apos;RuneEmoticonRegeneration&apos;)">
								<DOTAEmoticon id="RuneEmoticonRegeneration" alias="regeneration" animating="false" />
							</Button>
							<Panel class="FillWidth" />
							<Button class="RuneButton" acceptsjoyfocus="true" onactivate="RequestSpawnRune(DOTA_RUNES.DOTA_RUNE_ARCANE)" onmouseover="MouseOverRune(&apos;RuneEmoticonArcane&apos;, &apos;#DOTA_HUD_Rune_Arcane&apos;)" onmouseout="MouseOutRune(&apos;RuneEmoticonArcane&apos;)">
								<DOTAEmoticon id="RuneEmoticonArcane" alias="arcane_rune" animating="false" />
							</Button>
						</Panel>
					</Panel>
				</Panel>
				<Panel id="EditUnitsCategory" class="Category">
					<Label class="CategoryHeader" text="#EditUnits_ButtonCategory" />
					<Panel class="CategoryButtonContainer">
						<Panel class="Row">
							<Button id="LevelUpSelectedHeroesButton" class="DemoButton LeftButton" acceptsjoyfocus="true" onactivate="LevelUpSelectedHeroes()">
								<Label text="#LevelUpSelectedHeroes_Button" />
							</Button>
							<Button class="DemoButton RightButton" acceptsjoyfocus="true" onactivate="MaxLevelUpSelectedHeroes()">
								<Label text="#MaxLevelUpSelectedHeroes_Button" />
							</Button>
						</Panel>
						<Panel class="Row">
							<Button class="DemoButton LeftButton" acceptsjoyfocus="true" onactivate="ScepterSelectedHeroes()">
								<Label text="#ScepterSelectedHeroes_Button" />
							</Button>
							<Button class="DemoButton RightButton" acceptsjoyfocus="true" onactivate="ShardSelectedHeroes()">
								<Label text="#ShardSelectedHeroes_Button" />
							</Button>
						</Panel>
						<Panel class="Row">
							<Button class="DemoButton LeftButton" acceptsjoyfocus="true" onactivate="ToggleInvulnerabilityState(true)">
								<Label text="#InvulnOn_Button" />
							</Button>
							<Button class="DemoButton RightButton" acceptsjoyfocus="true" onactivate="ToggleInvulnerabilityState(false)">
								<Label text="#InvulnOff_Button" />
							</Button>
						</Panel>
						<Panel class="Row">
							<Button class="DemoButton LeftButton" acceptsjoyfocus="true" onactivate="ResetSelectedHeroes()">
								<Label text="#Reset_Button" />
							</Button>
							<Button class="DemoButton RightButton" acceptsjoyfocus="true" onactivate="RemoveSelectedHeroes()">
								<Label text="#RemoveSpawns_Button" />
							</Button>
						</Panel>
					</Panel>
				</Panel>
				<Panel id="OT3DevCategory" class="Category">
					<Label class="CategoryHeader" text="#OT3Dev_ButtonCategory" />
					<Panel class="CategoryButtonContainer">
						<Panel class="Row">
							<Button id="LevelUpSelectedHeroesButton" class="DemoButton LeftButton" acceptsjoyfocus="true" onactivate="ToggleTestUI(&apos;UpgradesHero&apos;)">
								<Label text="#OT3Dev_Hero_Button" />
							</Button>
							<Button class="DemoButton RightButton" acceptsjoyfocus="true" onactivate="ToggleTestUI(&apos;UpgradesGeneric&apos;)">
								<Label text="#OT3Dev_Generic_Button" />
							</Button>
						</Panel>
					</Panel>
				</Panel>
				<Panel id="GlobalCategory" class="Category">
					<Label class="CategoryHeader" text="#Global_ButtonCategory" />
					<Panel class="CategoryButtonContainer">
						<Panel class="Row">
							<ToggleButton id="FreeSpellsButton" class="DemoToggleButton" acceptsjoyfocus="true" onactivate="GameEvents.SendCustomGameEventToServer(&apos;Demo:toggle_free_spells&apos;, {})">
								<Label text="#FreeSpells_Button" />
							</ToggleButton>
							<Button id="RefreshButton" acceptsjoyfocus="true" onactivate="GameEvents.SendCustomGameEventToServer(&apos;Demo:refresh_all_players&apos;, {})" onmouseover="UIShowTextTooltip( #Refresh_Button )" onmouseout="UIHideTextTooltip()">
								<Panel class="RefreshIcon" />
							</Button>
						</Panel>
						<Panel class="Row">
							<ToggleButton id="CreepsButton" class="DemoToggleButton" acceptsjoyfocus="true" onactivate="GameEvents.SendCustomGameEventToServer(&apos;Demo:toggle_creeps&apos;, {})">
								<Label text="#DemoToggleCreeps" />
							</ToggleButton>
						</Panel>
						<Panel class="Row">
							<ToggleButton id="TowersButton" class="DemoToggleButton" acceptsjoyfocus="true" onactivate="GameEvents.SendCustomGameEventToServer(&apos;Demo:toggle_towers&apos;, {})">
								<Label text="#DemoToggleTowers" />
							</ToggleButton>
						</Panel>
					</Panel>
				</Panel>
				<Panel id="Footer">
					<TextButton class="DemoButton LeftButton PauseButton" acceptsjoyfocus="true" text="#PauseDemo_Button" onactivate="GameEvents.SendCustomGameEventToServer(&apos;Demo:toggle_pause&apos;, {})" />
					<TextButton class="DemoButton RightButton QuitButton" acceptsjoyfocus="true" text="#QuitDemo_Button" onactivate="GameEvents.SendCustomGameEventToServer(&apos;Demo:leave&apos;, {})" />
				</Panel>
			</Panel>
			<Panel id="ControlPanelSlideThumbContainer" require-composition-layer="true">
				<Button id="ControlPanelSlideThumb" acceptsjoyfocus="true" onactivate="SlideThumbActivate()">
					<Panel class="RightArrowButtonIcon" />
				</Button>
			</Panel>
		</Panel>
	</Panel>
</root>
